from app.management.commands.bot import updater
from app.bot.bot_utils import insert_order
from app.bot import keyboards

# def remove_job_if_exists(name, context):
#     current_jobs = context.job_queue.get_jobs_by_name(name)
#     if not current_jobs:
#         return False
#     for job in current_jobs:
#         job.schedule_removal()
#     return True

# def set_timer(update, context):
#     chat_id = update.message.chat_id
#     try:
#         due = int(context.args[0])
#         if due < 0:
#             update.message.reply_text(
#                 '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–º–µ–µ–º –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ –ø—Ä–æ—à–ª–æ–µ')
#             return

#         job_removed = remove_job_if_exists(
#             str(chat_id), 
#             context
#         )
#         context.job_queue.run_once(
#             task,
#             due,
#             context=chat_id,
#             name=str(chat_id)
#         )
#         text = f'–í–µ—Ä–Ω—É—Å—å —á–µ—Ä–µ–∑ {due} —Å–µ–∫—É–Ω–¥!'
#         if job_removed:
#             text += ' –°—Ç–∞—Ä–∞—è –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.'
#         update.message.reply_text(text)

#     except (IndexError, ValueError):
#         update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set <—Å–µ–∫—É–Ω–¥>')

# def task(context):
#     job = context.job
#     context.bot.send_message(job.context, text='–í–µ—Ä–Ω—É–ª—Å—è!')

# def unset_timer(update, context):
#     chat_id = update.message.chat_id
#     job_removed = remove_job_if_exists(str(chat_id), context)
#     text = '–•–æ—Ä–æ—à–æ, –≤–µ—Ä–Ω—É–ª—Å—è —Å–µ–π—á–∞—Å!' if job_removed else '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞.'
#     update.message.reply_text(text)

def offer_master_order(master, order):
    try:
        message = 'üíº –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑'
        message += insert_order(order)
        updater.bot.sendMessage(master.telegram_chat_id, message, reply_markup=keyboards.get_offer_order_keyboard(), parse_mode='html')
    except Exception as e:
        print(e)